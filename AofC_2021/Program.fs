open System
open System.Text.RegularExpressions
let getDayPartMethods (type_: Type) =
    type_.GetMethods() |> Seq.filter (fun m -> m.Name.StartsWith("part")) |> Seq.toArray

let getDataFilePath (type_: Type) =
    let filename = $"{type_.Name}.txt"
    if System.IO.File.Exists(filename) then Some(filename)
    else None

let getDataFileContent (type_: Type) = match getDataFilePath type_ with
    | Some path -> System.IO.File.ReadAllText(path)
    | None -> ""

let getDayTypes =
    let assembly = AppDomain.CurrentDomain.GetAssemblies() |> Array.find (fun a -> a.GetName().Name.StartsWith("AofC"))
    let found = assembly.ExportedTypes 
                |> Seq.map (fun t -> (t, Regex.Match(t.Name, @"^D(\d+)$"))) 
                |> Seq.filter (fun f -> (snd f).Success)
                |> Seq.map (fun f -> (int (snd f).Groups.[1].Value, fst f))
    Map(found |> Seq.toArray)

let generateReadMe (types: Type array) basePath =
    let methodInfo input (method: Reflection.MethodInfo) = $"### {method.Name}\nResult: `{method.Invoke(null, [|input|])}`"
    let relativePath filepath = $"{basePath}/{filepath}"

    types |> Array.map (fun t -> 
        let input = getDataFileContent t
        $"""## [{t.Name}]({relativePath t.Name}.fs)
[Data file]({match getDataFilePath t with | Some f -> relativePath f | None -> ""})  
{getDayPartMethods t |> Array.map (fun f-> methodInfo input f) |> String.concat "\n"}
"""
    ) 
                |> String.concat "\n"

let findFile leaf fGetFile =
    let rec loop (dir: System.IO.DirectoryInfo) =
        let (foundFile: 'a option) = fGetFile dir //dir.GetFiles("*.sln")
        if foundFile.IsNone then 
            if dir.Parent = null then None
            else loop dir.Parent
        else foundFile
    loop leaf

let writeReadme readmeFilename =
    let currDir = new System.IO.DirectoryInfo(System.IO.Directory.GetCurrentDirectory())
    let findFile2 filename = findFile currDir (fun dir -> dir.GetFiles(filename) |> Array.tryHead)
    let readmeFile = findFile2 readmeFilename
    if readmeFile.IsSome then
        let readmeContent = System.IO.File.ReadAllText(readmeFile.Value.FullName)
        let startMatch = Regex.Match(readmeContent, "##Autogenerated##")
        if startMatch.Success then
            let autogenerated = generateReadMe (getDayTypes |> Map.toArray |> Array.map (fun f -> snd f)) (findFile2 "Program.fs").Value.Directory.Name
            let newContent = readmeContent.Substring(0, (startMatch.Index + startMatch.Length)) + "\n" + autogenerated
            System.IO.File.WriteAllText(readmeFile.Value.FullName, newContent)

[<EntryPoint>]
let main argv =
    let day = 12

    writeReadme "README.md"
    let dayType = getDayTypes.[day]
    let input = match getDataFilePath dayType with
        | Some path -> System.IO.File.ReadAllText(path)
        | None -> ""

    let methods = getDayPartMethods dayType
    let results = methods |> Seq.map (fun f -> $"{f.Name}: {f.Invoke(null, [|input|])}") |> Seq.toArray

    printf "Result:\n%A\n" (results |> String.concat "\n")
    0
